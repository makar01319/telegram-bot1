#import telebot
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import BufferedInputFile

import math
from geopy.distance import geodesic
from PIL import Image
import requests
from io import BytesIO
from bs4 import BeautifulSoup
import re
import os
import emoji

bot = Bot(token=os.environ["TOKEN"])
dp = Dispatcher()
#ALLOWED_USERS = [6786356810, 7151289924, 1363237952, 1003452396, 1911144024, 5150929048, 1578662299, 7534631220, 705241092, 2127881707, 1661767451]
BASE_LOCATIONS = {"–•–∞—Ä–∫—ñ–≤": (50.00, 36.25), "–ú–∞—Ä—ñ—É–ø–æ–ª—å": (47.10, 37.55), "–°—É–º–∏": (50.91, 34.80)}

MAPS = [
        {
            "url": "https://i.ibb.co/b5j2XrRD/2025-03-01-14-17-37.png",
            "lat_min": 49.972, "lat_max": 53.527,
            "lon_min": 29.399, "lon_max": 43.923
        },
        {
            "url": "https://i.ibb.co/S7D5MZfp/2025-03-01-12-26-19.png",
            "lat_min": 39.84, "lat_max": 48.08,
            "lon_min": 27.49, "lon_max": 56.65
        },
        {
            "url": "https://i.ibb.co/cGBhScb/image-2025-02-20-22-18-21.png",
            "lat_min": 51.43, "lat_max": 58.25,
            "lon_min": 26.89, "lon_max": 56.23
        },
        {
            "url": "https://i.ibb.co/JFKnYNfh/2025-02-20-20-56-32.png",
            "lat_min": 44.20, "lat_max": 51.82,
            "lon_min": 29.07, "lon_max": 57.44
        },
        {
            "url": "https://i.ibb.co/XZnRB6dq/2025-02-20-21-12-10.png",
            "lat_min": 60.93, "lat_max": 70.24,
            "lon_min": 17.01, "lon_max": 78.22
        },
        {
            "url": "https://i.ibb.co/TMc341G2/2025-02-20-21-10-31.png",
            "lat_min": 50.18, "lat_max": 62.65,
            "lon_min": 26.32, "lon_max": 87.63
        },
        {
            "url": "https://i.ibb.co/nsSyv88P/2025-02-21-16-23-47.png",
            "lat_min": 54.14, "lat_max": 65.51,
            "lon_min": 38.98, "lon_max": 96.28
        },
        {
            "url": "https://i.ibb.co/hRvtjktV/8343284.png",
            "lat_min": 53.1774,
            "lat_max": 65.7855,
            "lon_min": -12.1248,
            "lon_max": 33.0397
        },
    ]

DIRECTION_MAP = {
    "–ø–Ω": 0,
    "–ø–Ω-—Å—Ö": 45,
    "—Å—Ö": 90,
    "–ø–¥-—Å—Ö": 135,
    "–ø–¥": 180,
    "–ø–¥-–∑—Ö": 225,
    "–∑—Ö": 270,
    "–ø–Ω-–∑—Ö": 315
}
# –ú—ñ—Å—Ç–∞ —Ç–∞ —ó—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
cities = {
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–•–µ—Ä—Å–æ–Ω", (46.6356, 32.6169)),
        ("–ù–æ–≤–æ–æ–ª–µ–∫—Å—ñ—ó–≤–∫–∞", (46.0929, 32.5503)),
        ("–ö–∞—Ö–æ–≤–∫–∞", (46.7269, 33.4676)),
        ("–ì–µ–Ω—ñ—á–µ—Å—å–∫", (46.4216, 34.7801)),
        ("–°–∫–∞–¥–æ–≤—Å—å–∫", (46.3928, 33.5739)),
        ("–û–ª–µ—à–∫–∏", (46.1448, 32.8914)),
        ("–ë–µ—Ä–∏—Å–ª–∞–≤", (46.6425, 33.3953)),
    ],
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ó–∞–ø–æ—Ä—ñ–∂–∂—è", (47.8388, 35.1396)),
        ("–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å", (46.0661, 35.3656)),
        ("–ë–µ—Ä–¥—è–Ω—Å—å–∫", (46.7661, 36.8119)),
        ("–ï–Ω–µ—Ä–≥–æ–¥–∞—Ä", (47.5096, 34.5858)),
        ("–¢–æ–∫–º–∞–∫", (47.5313, 35.6778)),
        ("–í–∞—Å–∏–ª—ñ–≤–∫–∞", (47.4817, 35.2250)),
        ("–û—Ä—ñ—Ö—ñ–≤", (47.4194, 35.6636)),
    ],
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–î–æ–Ω–µ—Ü—å–∫", (48.0159, 37.8029)),
        ("–ú–∞—Ä—ñ—É–ø–æ–ª—å", (47.0974, 37.5407)),
        ("–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫", (48.7197, 37.5613)),
        ("–ü–æ–∫—Ä–æ–≤—Å—å–∫", (48.2597, 37.2206)),
        ("–ë–∞—Ö–º—É—Ç", (48.5747, 38.0295)),
        ("–°–ª–æ–≤'—è–Ω—Å—å–∫", (48.8722, 37.6210)),
        ("–î—Ä—É–∂–∫—ñ–≤–∫–∞", (48.2925, 37.6162)),
    ],
    "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–õ—É–≥–∞–Ω—Å—å–∫", (48.5747, 39.3147)),
        ("–°—î–≤—î—Ä–æ–¥–æ–Ω–µ—Ü—å–∫", (48.9253, 38.5011)),
        ("–õ–∏—Å–∏—á–∞–Ω—Å—å–∫", (48.9221, 38.4525)),
        ("–ê–ª—á–µ–≤—Å—å–∫", (48.5784, 38.7417)),
        ("–°—Ç–∞—Ö–∞–Ω–æ–≤", (48.6863, 38.5364)),
        ("–ö—Ä–µ–º—ñ–Ω–Ω–∞", (48.7462, 38.3832)),
        ("–ü–æ–ø–∞—Å–Ω–∞", (48.6262, 38.4779)),
    ],
    "–†–æ—Å—Ç–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", (47.2357, 39.7015)),
        ("–¢–∞–≥–∞–Ω—Ä–æ–≥", (47.2307, 38.9020)),
        ("–®–∞—Ö—Ç–∏", (48.0395, 40.2232)),
        ("–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—å–∫", (47.4095, 40.0997)),
        ("–ê–∑–æ–≤", (47.1100, 38.8806)),
        ("–ë–∞—Ç–∞–π—Å—å–∫", (47.2295, 39.7301)),
        ("–í–æ–ª–≥–æ–¥–æ–Ω—Å—å–∫", (48.0403, 42.1431)),
    ],
    "–í–æ—Ä–æ–Ω–µ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–í–æ—Ä–æ–Ω–µ–∂", (51.6758, 39.2082)),
        ("–†–æ—Å—Å–æ—à", (50.8257, 39.4897)),
        ("–õ–∏—Å–∫–∏–Ω", (50.3403, 39.5063)),
        ("–ë–æ—Ä–∏—Å–æ–≥–ª—ñ–±—Å—å–∫", (51.2947, 39.6106)),
        ("–ü–∞–≤–ª–æ–≤—Å—å–∫", (50.6290, 39.5082)),
        ("–ë–æ–≥—É—á–∞—Ä", (50.6539, 39.2416)),
        ("–û—Å—Ç—Ä–æ–≥–æ–∂—Å—å–∫", (50.8761, 39.3130)),
    ],
    "–ë—î–ª–≥–æ—Ä–æ–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ë—î–ª–≥–æ—Ä–æ–¥", (50.5937, 36.5858)),
        ("–°—Ç–∞—Ä–∏–π –û—Å–∫–æ–ª", (51.2916, 37.8549)),
        ("–ì—Ä–∞–π–≤–æ—Ä–æ–Ω", (50.5446, 36.5654)),
        ("–®–µ–±–µ–∫—ñ–Ω–æ", (50.6144, 36.7190)),
        ("–ö–æ—Ä–æ—á–∞", (50.4981, 36.4954)),
        ("–í–∞–ª—É–π–∫–∏", (50.4116, 37.4558)),
        ("–ß–µ—Ä–Ω—è–Ω–∫–∞", (50.3756, 37.2297)),
    ],
    "–ö—É—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ö—É—Ä—Å—å–∫", (51.7373, 36.1876)),
        ("–†–∏–ª—å—Å—å–∫", (51.0295, 35.7665)),
        ("–©–∏–≥—Ä–∏", (51.0405, 36.1763)),
        ("–õ—å–≥–æ–≤", (51.3771, 35.6593)),
        ("–°—É–¥–∂–∞", (51.1281, 34.9554)),
        ("–û–±–æ—è–Ω—å", (50.7255, 36.1358)),
        ("–§–∞—Ç–µ–∂", (51.2766, 36.4244)),
    ],
    "–ë—Ä—è–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ë—Ä—è–Ω—Å—å–∫", (53.2415, 34.3705)),
        ("–ö–ª–∏–Ω—Ü—ñ", (52.6646, 32.0295)),
        ("–°–µ–≤—Å—å–∫", (52.0995, 33.4299)),
        ("–ù–æ–≤–æ–∑–∏–±–∫–æ–≤", (52.9496, 31.1169)),
        ("–ü–æ—á–µ–ø", (53.2490, 33.3876)),
        ("–§–æ–∫–∏–Ω–æ", (53.0569, 34.3486)),
        ("–ñ—É–∫–æ–≤–∫–∞", (53.0255, 33.1424)),
    ]
}

BASE_LOCATIONS = {
    "–•–∞—Ä–∫—ñ–≤": (50.00, 36.25),
    "–ú–∞—Ä—ñ—É–ø–æ–ª—å": (47.10, 37.55),
    "–°—É–º–∏": (50.91, 34.80)
}

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
import asyncio
PROVIDER_TOKEN = ""

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –æ–ø–ª–∞—Ç–∏
def payment_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ 1 XTR", pay=True)]]
    )
import re
from datetime import datetime
from io import BytesIO

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram.enums import ContentType, ParseMode
from aiogram.types import Document
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InputFile
import asyncio

# üß† –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    airfield = State()
    price = State()
    wait_text = State()
    wait_photo = State()

user_data = {}

# /start
@dp.message(Command("airf"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∞–µ—Ä–æ–¥—Ä–æ–º—É:")
    await state.set_state(Form.airfield)


@dp.message(Form.airfield)
async def process_airfield(message: Message, state: FSMContext):
    await state.update_data(airfield=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 2100 –≥—Ä–Ω):")
    await state.set_state(Form.price)


@dp.message(Form.price)
async def process_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–û—á—ñ–∫—É—é —Ç–µ–∫—Å—Ç–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–Ω—ñ–º–æ–∫. –ü–æ—Ç—ñ–º –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –æ–∫—Ä–µ–º–æ.")
    await state.set_state(Form.wait_text)


@dp.message(Form.wait_text, F.content_type == ContentType.TEXT)
async def handle_text_data(message: Message, state: FSMContext):
    parsed = parse_image_info(message.text)
    if not parsed:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å.")
        return

    await state.update_data(parsed=parsed)
    await message.answer("–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ preview-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∞–±–æ —Ñ–æ—Ç–æ).")
    await state.set_state(Form.wait_photo)


@dp.message(Form.wait_photo, F.document)
async def handle_document(message: Message, state: FSMContext):
    document: Document = message.document

    '''if document.file_name != "image1.png":
        await message.answer("–û—á—ñ–∫—É—é —Ñ–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é image1.png.")
        return'''

    file = await bot.download(document.file_id)
    photo_bytes = file.read()
    file.close()

    await send_final_photo(message, state, photo_bytes)


@dp.message(Form.wait_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await bot.download(photo.file_id)
    photo_bytes = file.read()
    file.close()

    await send_final_photo(message, state, photo_bytes)


async def send_final_photo(message: Message, state: FSMContext, photo_bytes: bytes):
    data = await state.get_data()
    airfield = data['airfield']
    price = data['price']
    parsed = data['parsed']

    resolution_label = resolution_to_label(parsed['resolution'])

    caption = f"""<b>‚ûï –ù–æ–≤–∏–π –∑–Ω—ñ–º–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ:</b>
–∞–≤–±. {airfield}.

<b>–î–∂–µ—Ä–µ–ª–æ:</b> {parsed['source']};
<b>–†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å:</b> {parsed['resolution']} ({resolution_label});
<b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω;
<b>–•–º–∞—Ä–Ω—ñ—Å—Ç—å:</b> {parsed['cloud']}%;
<b>–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–Ω—ñ–º–∫—É:</b> {parsed['date_kyiv']}."""

    photo_input = BufferedInputFile(photo_bytes, filename="preview.jpg")
    await bot.send_photo(chat_id=message.chat.id, photo=photo_input, caption=caption, parse_mode="HTML")
    await bot.send_photo(chat_id=-1002547942054, photo=photo_input, caption=caption, parse_mode="HTML")
    '''await bot.send_photo(
        chat_id=-1002321030142,
        photo=photo_input,
        caption=caption,
        parse_mode="HTML",
        message_thread_id=30278  # ID –≥—ñ–ª–∫–∏ (thread)
    )'''
    await bot.send_photo(
        chat_id=-1003092949848,
        photo=photo_input,
        caption=caption,
        parse_mode="HTML",
        message_thread_id=28  # ID –≥—ñ–ª–∫–∏ (thread)
    )


    #await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()


# üì¶ –ü–∞—Ä—Å–µ—Ä
def parse_image_info(text):
    try:
        product = re.search(r'Product\s+(.+)', text).group(1).strip()
        resolution = re.search(r'Resolution\s+(.+)', text).group(1).strip()
        cloud = re.search(r'Est Cloud Coverage\s+([0-9.]+)%', text).group(1).strip()
        source = re.search(r'Source\s+(.+)', text).group(1).strip()
        date_utc_str = re.search(r'Date taken\s+(.+ GMT)', text).group(1).strip()

        utc_dt = datetime.strptime(date_utc_str, "%b %d,%Y %H:%M:%S GMT")
        kyiv_dt = pytz.utc.localize(utc_dt).astimezone(pytz.timezone("Europe/Kyiv"))
        formatted_date = kyiv_dt.strftime("%d %B %Y, %H:%M")

        return {
            'product': product,
            'resolution': resolution,
            'cloud': cloud,
            'source': source,
            'date_kyiv': formatted_date
        }
    except Exception as e:
        print("‚ùå Parser error:", e)
        return None


def resolution_to_label(res):
    try:
        num = float(res.replace("cm", "").strip())
        if num <= 50:
            return "–≤–∏—Å–æ–∫–∞"
        elif num <= 150:
            return "—Å–µ—Ä–µ–¥–Ω—å–æ-–≤–∏—Å–æ–∫–∞"
        else:
            return "–Ω–∏–∑—å–∫–∞"
    except:
        return "–Ω–µ–≤—ñ–¥–æ–º–∞"

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /donate
@dp.message(Command("donate"))
async def send_invoice_handler(message: Message):
    prices = [LabeledPrice(label="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", amount=1)]  # 100 XTR = 10000 (–±–æ —Å—É–º–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö)
    
    await message.answer_invoice(
        title="–î–æ–Ω–∞—Ç –≤–ª–∞—Å–Ω–∏–∫—É –±–æ—Ç–∞",
        description="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
        payload="channel_support",
        reply_markup=payment_keyboard(),
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

# –û–±—Ä–æ–±–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
@dp.message(F.successful_payment)
async def process_successful_payment(message: Message):
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {message.successful_payment.telegram_payment_charge_id}"
    )

@dp.message(Command('refund'))
async def refund_handler(message: Message, bot: Bot, command: CommandObject) -> None:
    transaction_id = command.args
    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )
        await message.answer("Refund initiated successfully.")
    except Exception as e:
        print(e)
        await message.answer("An error occurred while processing the refund.")

# –í–∞—à—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
ALLOWED_USERS = ['6307765045', '5846625636', '3113369', '5355006713', '6549051790', '334092624', '1009518020', '6786356810', '1446354057', '5571905790', '7151289924', '1363237952', '1003452396', '1911144024', '5150929048', '1578662299', '7534631220', '705241092', '2127881707', '1661767451']
CHANNEL_ID2 = -1002543043073
TARGET_MESSAGE_ID = 2 
AUTHORIZED_USER_IDS = [1911144024, 6786356810]
forwarding_enabled = None
def get_forwarding_status_from_url():
    global forwarding_enabled
    url = 'https://t.me/ofdsnfajsdnfajdsnf344/2'
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        meta_tag = soup.find('meta', property='og:description')
        if meta_tag and 'content' in meta_tag.attrs:
            content = meta_tag['content'].strip().lower()
            forwarding_enabled = content == "on"
        else:
            forwarding_enabled = True
    else:
        forwarding_enabled = True 
        
from aiogram.enums.parse_mode import ParseMode

import asyncio
import emoji
from aiogram import Bot, Dispatcher, F
from aiogram.types import ChatMemberUpdated
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION

CHANNEL_ID11 = -1002133315828
ADMIN_IDS11 = [1911144024,6786356810]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π Telegram ID

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
def contains_target_words(name: str) -> bool:
    name = name.lower()
    keywords = [
        "–º—ñ—Ä–æ—Å–ª–∞–≤–∞", "–∞–Ω–≥–µ–ª—ñ–Ω–∞", "–ø–æ–≤—Å—Ç", "–º–∏—Ä–æ—Å–ª–∞–≤–∞", "—é–ª–∏—á–∫–∞", "—é–ª—ñ—á–∫–∞",
        "—Å–º–æ—Ç—Ä–∏", "–ø—Ä–æ—Ñ–∏–ª", "–∏–Ω—Ç–∏–º", "t.me", "ü•µ", "üíó", "kira", "–∞–Ω–≥–µ–ª–∏–Ω–∫–∞",
        "–∞–Ω–≥–µ–ª", "–ø—É—Å—Å–∏", "—é–ª—è", "—Ç–≤–æ—è", "–∑–∞–π–∫–∞", "üî•", "–ø—É—Å–∏"
    ]
    return any(word in name for word in keywords)

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –µ–º–æ–¥–∑—ñ (–æ–ø—Ü—ñ–π–Ω–æ)
def contains_emoji(text: str) -> bool:
    return any(char in emoji.EMOJI_DATA for char in text)

# üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
async def send_alert(bot: Bot, user, reason: str):
    message = (
        f"üõë –£–í–ê–ì–ê! {reason}!\n"
        f"ID: {user.id}\n"
        f"Firstname: {user.first_name or '-'}\n"
        f"Lastname: {user.last_name or '-'}\n"
        f"Username: @{user.username if user.username else '-'}"
    )
    try:
        await bot.send_message(chat_id=-1002775403549, text=message)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

# üß© –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async def join_member_channel(event: ChatMemberUpdated, bot: Bot):
    user = event.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()

    try:
        profile = await bot.get_chat(user.id)
        bio = profile.bio or ""
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–æ: {e}")
        bio = ""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
    if contains_target_words(full_name) or "t.me" in bio.lower():
        await send_alert(bot, user, reason="–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ")
        return  # –ù–µ —á–µ–∫–∞—î–º–æ 2 —Ö–≤ ‚Äî –≤–∂–µ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π

    # –Ø–∫—â–æ –≤—Å–µ –≤–∏–≥–ª—è–¥–∞—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ 2 —Ö–≤–∏–ª–∏–Ω–∏
    await asyncio.sleep(120)

    try:
        updated_profile = await bot.get_chat(user.id)
        updated_full_name = f"{updated_profile.first_name or ''} {updated_profile.last_name or ''}".strip()
        updated_bio = updated_profile.bio or ""

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É –ø—Ä–æ—Ñ—ñ–ª—é
        if updated_full_name != full_name or updated_bio != bio:
            await send_alert(bot, user, reason="–ó–º—ñ–Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—é –ø—Ä–æ—Ç—è–≥–æ–º 2 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
dp.chat_member.register(
    join_member_channel,
    ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION),
    F.chat.id == CHANNEL_ID11
)
'''# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
def contains_target_words(name: str) -> bool:
    name = name.lower()
    keywords = ["–º—ñ—Ä–æ—Å–ª–∞–≤–∞", "–∞–Ω–≥–µ–ª—ñ–Ω–∞", "–ø–æ–≤—Å—Ç", "–º–∏—Ä–æ—Å–ª–∞–≤–∞", "—é–ª–∏—á–∫–∞", "—é–ª—ñ—á–∫–∞", "—Å–º–æ—Ç—Ä–∏", "–ø—Ä–æ—Ñ–∏–ª", "–∏–Ω—Ç–∏–º", "t.me", "ü•µ", "üíó", "kira", "–∞–Ω–≥–µ–ª–∏–Ω–∫–∞", "–∞–Ω–≥–µ–ª", "–ø—É—Å—Å–∏", "—é–ª—è", "—Ç–≤–æ—è", "–∑–∞–π–∫–∞", "üî•", "–ø—É—Å–∏"]
    return any(word in name for word in keywords)
def contains_emoji(text: str) -> bool:
    return any(char in emoji.EMOJI_DATA for char in text)
async def join_member_channel(event: ChatMemberUpdated, bot: Bot):
    user = event.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()

    if contains_target_words(full_name):
        message = (
            f"üõë –£–í–ê–ì–ê! –ù–æ–≤–∏–π –ü–Ü–î–û–ó–†–Ü–õ–ò–ô –ø—ñ–¥–ø–∏—Å–Ω–∏–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ñ!\n"
            f"ID: {user.id}\n"
            f"Firstname: {user.first_name or '-'}\n"
            f"Lastname: {user.last_name or '-'}\n"
            f"Username: @{user.username if user.username else '-'}"
        )
        try:
            await bot.send_message(chat_id=-1002775403549, text=message)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
    else:
        pass

dp.chat_member.register(
    join_member_channel,
    ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION),
    F.chat.id == CHANNEL_ID11
)
'''
@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ—Å—Ç—É–ø –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if message.from_user.id not in AUTHORIZED_USER_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.")
        return
    get_forwarding_status_from_url()
    if forwarding_enabled:
        greeting_text = (
            '‚ÑπÔ∏è –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Å–∏–ª–∫–∞ –∑ –∫–∞–Ω–∞–ª—É "<i><b>–ü–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Å–∏–ª–∏ –ó–°–£</b></i>" ‚Äî <b>—É–≤—ñ–º–∫–Ω–µ–Ω–∞.</b>\n\n'
            '–©–æ–± –≤–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É <b>–Ω–∞—Ç–∏—Å–Ω–∏ "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"</b> –Ω–∏–∂—á–µ.'
        )
        button_text = "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"
    else:
        greeting_text = (
            '‚ÑπÔ∏è –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Å–∏–ª–∫–∞ –∑ –∫–∞–Ω–∞–ª—É "<i><b>–ü–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Å–∏–ª–∏ –ó–°–£</b></i>" ‚Äî <b>–≤–∏–º–∫–Ω–µ–Ω–∞.</b>\n\n'
            '–©–æ–± —É–≤—ñ–º–∫–Ω–∏—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É <b>–Ω–∞—Ç–∏—Å–Ω–∏ "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"</b> –Ω–∏–∂—á–µ.'
        )
        button_text = "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button_text, callback_data="toggle_forwarding")]]
    )
    await message.answer(greeting_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data == "toggle_forwarding")
async def toggle_forwarding(callback: types.CallbackQuery):
    global forwarding_enabled
    forwarding_enabled = not forwarding_enabled
    if forwarding_enabled:
        button_text = "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"
        greeting_text = (
            '‚ÑπÔ∏è –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Å–∏–ª–∫–∞ –∑ –∫–∞–Ω–∞–ª—É "<i><b>–ü–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Å–∏–ª–∏ –ó–°–£</b></i>" ‚Äî <b>—É–≤—ñ–º–∫–Ω–µ–Ω–∞.</b>\n\n'
            '–©–æ–± –≤–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É <b>–Ω–∞—Ç–∏—Å–Ω–∏ "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"</b> –Ω–∏–∂—á–µ.'
        )
    else:
        button_text = "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"
        greeting_text = (
            '‚ÑπÔ∏è –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Å–∏–ª–∫–∞ –∑ –∫–∞–Ω–∞–ª—É "<i><b>–ü–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Å–∏–ª–∏ –ó–°–£</b></i>" ‚Äî <b>–≤–∏–º–∫–Ω–µ–Ω–∞.</b>\n\n'
            '–©–æ–± —É–≤—ñ–º–∫–Ω–∏—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É <b>–Ω–∞—Ç–∏—Å–Ω–∏ "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∫—É"</b> –Ω–∏–∂—á–µ.'
        )
    try:
        await bot.edit_message_text(
            text = 'on' if forwarding_enabled else 'off',
            chat_id=CHANNEL_ID2,
            message_id=TARGET_MESSAGE_ID,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        print(f"Error editing message: {e}")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button_text, callback_data="toggle_forwarding")]]
    )
    await callback.message.edit_text(greeting_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()

from geopy.distance import geodesic
import math

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–∞—Ö—É–Ω–∫—É –∞–∑–∏–º—É—Ç–∞
def calculate_bearing(start_lat, start_lon, end_lat, end_lon):
    start_lat, start_lon = math.radians(start_lat), math.radians(start_lon)
    end_lat, end_lon = math.radians(end_lat), math.radians(end_lon)

    d_lon = end_lon - start_lon
    x = math.sin(d_lon) * math.cos(end_lat)
    y = math.cos(start_lat) * math.sin(end_lat) - \
        math.sin(start_lat) * math.cos(end_lat) * math.cos(d_lon)
    bearing = math.atan2(x, y)
    bearing = math.degrees(bearing)
    return (bearing + 360) % 360

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /h
@dp.message(Command("h"))
async def handle_h_command(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /h <—à–∏—Ä–æ—Ç–∞> <–¥–æ–≤–≥–æ—Ç–∞>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /h 49.9935 36.2304")
            return
        
        lat, lon = float(parts[1]), float(parts[2])
        kharkiv_coords = (50.00, 36.25)

        distance_km = geodesic(kharkiv_coords, (lat, lon)).kilometers
        bearing_deg = calculate_bearing(kharkiv_coords[0], kharkiv_coords[1], lat, lon)

        await message.answer(
            f"üìç –í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –•–∞—Ä–∫–æ–≤–∞: <b>{round(distance_km)} –∫–º</b>\n"
            f"üß≠ –ê–∑–∏–º—É—Ç: <b>{round(bearing_deg)}¬∞</b>\n\n"
            f"<b>–ö—ñ–Ω—Ü–µ–≤–∏–π –≤–∏–≤—ñ–¥:</b> –≤—ñ–¥ –•–ê–†–ö–û–í–ê {round(bearing_deg)}/{round(distance_km)}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç (–ø–æ—Ç—Ä—ñ–±–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è —à–∏—Ä–æ—Ç–∏ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –Ω–µ —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ —ó—Ö –∫–æ–º–æ—é). \n\n–ü—Ä–∏–∫–ª–∞–¥: /h 49.99 36.23")
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ /h: {e}")
            
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if str(message.from_user.id) not in ALLOWED_USERS:
        await message.answer("üö´ –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    welcome_text = (
        "<b>–ë–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ</b> –≤–∏—Ä–∞—Ö—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –∑–∞ –∞–∑–∏–º—É—Ç–æ–º —Ç–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—è–º.\n" 
        "<b>–í–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:</b>\n\n"
        "1 ‚Äî –º—ñ—Å—Ç–æ (–•–∞—Ä–∫—ñ–≤/–ú–∞—Ä—ñ—É–ø–æ–ª—å)\n"
        "2 ‚Äî –∞–∑–∏–º—É—Ç\n"
        "3 ‚Äî –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—è\n"
        "4 ‚Äî –∫—É—Ä—Å (–Ω–µ–æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π)\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–≤–µ–¥–µ–Ω–Ω—è:</b>\n"
        "‚Äî –•–∞—Ä–∫—ñ–≤ 10 555 85\n"
        "‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 85 1000 195\n\n"
        "üÜï /get_approx_time ‚Äî —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ <b>–ø—Ä–∏–±–ª–∏–∑–Ω–æ–≥–æ —á–∞—Å—É </b>–ø—Ä–∏–ª—å–æ—Ç—É<b> —É–¥–∞—Ä–Ω–∏—Ö –ë–ø–õ–ê –¥–æ –î–ö–£.</b>"
    )

    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

locations2 = {
    "1": "–ë—Ä—è–Ω—Å—å–∫",
    "2": "–°–º–æ–ª–µ–Ω—Å—å–∫",
    "3": "–û—Ä–µ–ª",
    "4": "–ö—É—Ä—Å—å–∫",
    "5": "–ú—ñ–ª–ª–µ—Ä–æ–≤–æ",
    "6": "–ü—Ä–∏–º–æ—Ä—Å—å–∫-–ê—Ö—Ç–∞—Ä—Å—å–∫",
    "7": "–ë–µ—Ä–¥—è–Ω—Å—å–∫",
    "8": "–Ñ–π—Å—å–∫",
    "9": "–ú–∏—Å –ß–∞—É–¥–∞",
    "10": "–ì–≤–∞—Ä–¥—ñ–π—Å—å–∫–µ",
}

flight_times2 = {
    "1": {
        "–î–ö–£ –®–æ—Å—Ç–∫–∞": 45,
        "–®–æ—Å—Ç–∫–∞": 70,
        "–î–ö–£ –°—É–º–∏": 90,
        "–°—É–º–∏": 105,
        "–î–ö–£ –•–∞—Ä–∫—ñ–≤": 120,
        "–•–∞—Ä–∫—ñ–≤": 140
    },
    "2": {
        "–î–ö–£ –®–æ—Å—Ç–∫–∞": 90,
        "–®–æ—Å—Ç–∫–∞": 105,
        "–î–ö–£ –°—É–º–∏": 150,
        "–°—É–º–∏": 170,
        "–î–ö–£ –•–∞—Ä–∫—ñ–≤": 190,
        "–•–∞—Ä–∫—ñ–≤": 210
    },
    "3": {
        "–î–ö–£ –®–æ—Å—Ç–∫–∞": 70,
        "–®–æ—Å—Ç–∫–∞": 90,
        "–î–ö–£ –°—É–º–∏": 90,
        "–°—É–º–∏": 105,
        "–î–ö–£ –•–∞—Ä–∫—ñ–≤": 110,
        "–•–∞—Ä–∫—ñ–≤": 125
    },
    "4": {
        "–î–ö–£ –®–æ—Å—Ç–∫–∞": 55,
        "–®–æ—Å—Ç–∫–∞": 75,
        "–î–ö–£ –°—É–º–∏": 40,
        "–°—É–º–∏": 55,
        "–î–ö–£ –•–∞—Ä–∫—ñ–≤": 65,
        "–•–∞—Ä–∫—ñ–≤": 80
    },
    "5": {
        "–õ–ë–ó –°—ñ–≤–µ—Ä—Å—å–∫": 50,
        "–õ–ë–ó –Ω–∞ –ö—É–ø º—è–Ω—Å—å–∫": 60,
        "–ö—É–ø º—è–Ω—Å—å–∫": 70
    },
    "6": {
        "–î—É–¥—á–∞–Ω–∏": 120,
        "–•–µ—Ä—Å–æ–Ω": 140,
        "–ö—ñ–Ω–±—É—Ä–Ω—Å—å–∫–∞ –∫–æ—Å–∞": 160,
        "–û–¥–µ—Å–∞": 180
    },
    "7": {
        "–ó–∞–ø–æ—Ä—ñ–∂–∂—è": 55,
        "–ë–µ—Ä–∏—Å–ª–∞–≤": 80,
        "–û—á–∞–∫—ñ–≤": 110,
        "–û–¥–µ—Å–∞": 150
    },
    "8": {
        "–•–µ—Ä—Å–æ–Ω": 130,
        "–û—á–∞–∫—ñ–≤": 165,
        "–û–¥–µ—Å–∞": 180
    },
    "9": {
        "–î—É–¥—á–∞–Ω–∏": 90,
        "–•–µ—Ä—Å–æ–Ω": 100,
        "–ö—ñ–Ω–±—É—Ä–Ω—Å—å–∫–∞ –∫–æ—Å–∞": 125,
        "–û–¥–µ—Å–∞": 140,
        "–í–∑–¥–æ–≤–∂ –ø—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ —É–∑–±–µ—Ä–µ–∂–∂—è –ê–† –ö—Ä–∏–º:\n–ó–º—ñ—ó–Ω–∏–π": 170,
        "–ö—ñ–Ω–±—É—Ä–Ω—Å—å–∫–∞ –∫–æ—Åa": 170,
        "–û–¥–µ—Åa": 180
    },
    "10": {
        "–î—É–¥—á–∞–Ω–∏": 70,
        "–•–µ—Ä—Å–æ–Ω": 75,
        "–ö—ñ–Ω–±—É—Ä—Å—å–∫–∞ –∫–æ—Å–∞": 85,
        "–û–¥–µ—Å–∞": 105
    }
}
user_selection2 = {}
user_time_selection2 = {}
id_on = []

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —á–∞—Å—É
def validate_time_format2(time_input: str) -> str:
    time_input = time_input.strip().replace(":", ".").replace(" ", "")  # –ó–∞–º—ñ–Ω—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏, –¥–≤–æ–∫—Ä–∞–ø–∫–∏ –Ω–∞ –∫—Ä–∞–ø–∫–∏
    if len(time_input) == 4 and time_input.isdigit():
        return time_input[:2] + ":" + time_input[2:]  # –§–æ—Ä–º–∞—Ç—É—î–º–æ —è–∫ 00:00
    elif re.match(r"^\d{2}[:.]\d{2}$", time_input):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç 00:00 –∞–±–æ 00.00
        return time_input
    return None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —á–∞—Å—É (–≥–æ–¥–∏–Ω–∏ –¥–æ 24, —Ö–≤–∏–ª–∏–Ω–∏ –¥–æ 60)
def is_valid_time2(time_input: str) -> bool:
    time_parts = time_input.split(":")
    if len(time_parts) != 2:
        return False
    hours, minutes = time_parts
    try:
        hours = int(hours)
        minutes = int(minutes)
        if 0 <= hours < 24 and 0 <= minutes < 60:
            return True
    except ValueError:
        return False
    return False

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É
async def get_time_input_keyboard2():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data="cancel")]
    ])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó
def get_location_keyboard2(user_id, page=1):
    pages = [
        [("1Ô∏è‚É£ –ë—Ä—è–Ω—Å—å–∫", "1"), ("2Ô∏è‚É£ –°–º–æ–ª–µ–Ω—Å—å–∫", "2")], [("3Ô∏è‚É£ –û—Ä–µ–ª", "3"), ("4Ô∏è‚É£ –ö—É—Ä—Å—å–∫", "4")],
        [("5Ô∏è‚É£ –ú—ñ–ª–ª–µ—Ä–æ–≤–æ", "5"), ("6Ô∏è‚É£ –ü—Ä–∏–º–æ—Ä—Å—å–∫-–ê—Ö—Ç–∞—Ä—Å—å–∫", "6")], [("7Ô∏è‚É£ –ë–µ—Ä–¥—è–Ω—Å—å–∫", "7"), ("8Ô∏è‚É£ –Ñ–π—Å—å–∫", "8")],
        [("9Ô∏è‚É£ –ú–∏—Å –ß–∞—É–¥–∞", "9"), ("üîü –ì–≤–∞—Ä–¥—ñ–π—Å—å–∫–µ", "10")],
    ]
    
    buttons = [
        [InlineKeyboardButton(
            text=f"‚úÖ {locations2[btn_id]}" if user_selection2.get(user_id) == btn_id else text,
            callback_data=btn_id
        ) for text, btn_id in pages[i]] for i in range((page - 1) * 2, min(page * 2, len(pages)))
    ]
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if page < 3:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—ñ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
    else:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª—ñ ‚û°Ô∏è", callback_data="page_1"))
    if page == 1:
        nav_buttons.insert(0, InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="page_3"))
    
    buttons.append(nav_buttons)
    
    if user_id in user_selection2:
        buttons.append([InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é ‚úÖ", callback_data="confirm_location")])
    
    buttons.append([InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("get_approx_time"))
async def start(message: types.Message):
    await message.answer(
        "<b>–û–±–µ—Ä–∏ –ø—É—Å–∫–æ–≤—É –ª–æ–∫–∞—Ü—ñ—é</b> —Å–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∏–∂—á–µ:\n\n‚Äî <b>–ü—ñ–≤–Ω—ñ—á–Ω–∏–π:</b> –ë—Ä—è–Ω—Å—å–∫ ‚Äî 1Ô∏è‚É£, –°–º–æ–ª–µ–Ω—Å—å–∫ ‚Äî 2Ô∏è‚É£\n‚Äî <b>–ü—ñ–≤–Ω—ñ—á–Ω–∏–π-—Å—Ö—ñ–¥:</b> –û—Ä–µ–ª ‚Äî 3Ô∏è‚É£, –ö—É—Ä—Å—å–∫ ‚Äî 4Ô∏è‚É£\n‚Äî <b>–°—Ö—ñ–¥:</b> –ú—ñ–ª–ª–µ—Ä–æ–≤–æ ‚Äî 5Ô∏è‚É£\n‚Äî <b>–ü—ñ–≤–¥–µ–Ω–Ω–∏–π-—Å—Ö—ñ–¥:</b> –ü—Ä–∏–º–æ—Ä—Å—å–∫-–ê—Ö—Ç–∞—Ä—Å—å–∫ ‚Äî 6Ô∏è‚É£, –ë–µ—Ä–¥—è–Ω—Å—å–∫ ‚Äî 7Ô∏è‚É£, –Ñ–π—Å—å–∫ ‚Äî 8Ô∏è‚É£\n‚Äî <b>–ü—ñ–≤–¥–µ–Ω—å:</b> –ú–∏—Å –ß–∞—É–¥–∞ ‚Äî 9Ô∏è‚É£, –ì–≤–∞—Ä–¥—ñ–π—Å—å–∫–µ ‚Äî üîü",
        parse_mode=ParseMode.HTML, reply_markup=get_location_keyboard2(message.from_user.id, 1)
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü—ñ–π
@dp.callback_query(F.data.in_(locations2.keys()))
async def select_location(callback: CallbackQuery):
    user_selection2[callback.from_user.id] = callback.data
    id_on.append(callback.from_user.id)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ id_on
    await callback.message.edit_text(
        "‚ÑπÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ 0000, <b>–Ω–µ —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ —Ü–∏—Ñ—Ä–∏ –Ω—ñ—á–∏–º</b>. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –≤–≤–µ—Å—Ç–∏ <b>12 –≥–æ–¥–∏–Ω—É 10 —Ö–≤–∏–ª–∏–Ω –Ω–∞–ø–∏—à–∏ 1210</b>.",
        parse_mode=ParseMode.HTML, reply_markup=await get_time_input_keyboard2()
    )
    await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
@dp.callback_query(F.data.startswith("page_"))
async def navigate_pages(callback: CallbackQuery):
    page = int(callback.data.split("_")[1])  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    user_id = callback.from_user.id
    await callback.message.edit_text(
        "–û–±–µ—Ä–∏ –ø—É—Å–∫–æ–≤—É –ª–æ–∫–∞—Ü—ñ—é —Å–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –Ω–∏–∂—á–µ:",
        reply_markup=get_location_keyboard2(user_id, page)
    )
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_selection(callback: CallbackQuery):
    user_selection2.pop(callback.from_user.id, None)
    id_on.remove(callback.from_user.id)
    await callback.message.edit_text("‚ùå –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer()

locations = {
    "–∫—É—Ä—Å": "–ö—É—Ä—Å—å–∫",
    "—á–∞—É–¥": "–º–∏—Å –ß–∞—É–¥–∞",
    "–∞—Ö—Ç": "–ü—Ä–∏–º–æ—Ä—Å—å–∫-–ê—Ö—Ç–∞—Ä—Å—å–∫",
    "–æ—Ä–ª–∞": "–û—Ä–µ–ª",
    "–æ—Ä–µ–ª": "–û—Ä–µ–ª",
    "–æ—Ä–ª–æ–≤": "–û—Ä–µ–ª",
    "–±—Ä—è–Ω—Å": "–ë—Ä—è–Ω—Å—å–∫–∞",
    "–Ω–∞–≤–ª": "–ë—Ä—è–Ω—Å—å–∫–∞",
    "—î–π—Å—å": "–Ñ–π—Å—å–∫",
    "—à–∞—Ç": "–°–º–æ–ª–µ–Ω—Å—å–∫",
    "–º—ñ–ª": "–ú—ñ–ª–ª–µ—Ä–æ–≤–æ (–†–æ—Å—Ç–æ–≤—Å—å–∫–∞ –æ–±–ª.)"
}

'''
def remove_emojis(text: str) -> str:
    text_no_spaces_after_emojis = re.sub(r'([\U00010000-\U0010ffff])\s+', r'\1', text)
    text_cleaned = emoji.replace_emoji(text_no_spaces_after_emojis, replace='')
    text_no_extra_spaces = re.sub(r'\s+', ' ', text_cleaned).strip()
    return text_no_extra_spaces
'''
@dp.message(Command("send_msg"))
async def send_message_to_group(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if str(message.from_user.id) not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n`/send_msg <chat_id> <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        chat_id = int(parts[1])
        text_to_send = parts[2]
        await bot.send_message(chat_id=chat_id, text=text_to_send)
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n<code>{e}</code>", parse_mode=ParseMode.HTML)

from datetime import datetime, timedelta
def remove_emojis(text: str) -> str:
    emojis = [
        "üöÄ ", "üöÄ", "üõ´ ", "üõ´", "üõ¨ ", "üõ¨", "‚úà ", "‚úà", "üõ∏ ", "üõ∏", "üõµ ", "üõµ",
        "‚òÑ ", "‚òÑ", "üí• ", "üí•", "üöÅ ", "üöÅ", "‚ö† ", "‚ö†", "‚ö†Ô∏è ", "‚ö†Ô∏è", "üì¢ ", "üì¢",
        "‚ö° ", "‚ö°", "üó∫ ", "üó∫", "üî± ", "üî±", "üõ©Ô∏è ", "üõ©Ô∏è", "‚úàÔ∏è ", "‚úàÔ∏è", "‚ö°Ô∏è ", "‚ö°Ô∏è", "üö®", "üö® ", "‚û°Ô∏è", "‚û°Ô∏è "
    ]
    emoji_pattern = '|'.join(map(re.escape, emojis))
    lines = text.split('\n')
    cleaned_lines = []

    for line in lines:
        line = line.replace("!", ".")  # –ó–∞–º—ñ–Ω–∞ –≤—Å—ñ—Ö "!" –Ω–∞ "."
        line = re.sub(emoji_pattern, '', line)  # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ
        line = re.sub(r'\s+', ' ', line).strip()  # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏

        if '–∑–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–≤—ñ–∞' in line.lower():
            continue  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å —Ä—è–¥–æ–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ü–µ

        line = re.sub(r'\b–≤–æ—Ä–æ\S*', '', line, flags=re.IGNORECASE)  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–∞, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ "–≤–æ—Ä–æ"

        # –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–æ–≤–æ "—É–≤–∞–≥–∞" + –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π "!" –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ
        line = re.sub(r'\b—É–≤–∞–≥–∞\b[.!]?', '', line, flags=re.IGNORECASE).strip()

        if not line:
            continue

        if '–≤—ñ–¥–±—ñ–π' in line.lower():
            line = "üü¢ " + line

        cleaned_lines.append(line)
    cleaned_text = '\n'.join(cleaned_lines)
    if '–±–ø–ª–∞' in cleaned_text.lower() and '—Ä–æ–∑–≤' not in cleaned_text.lower() and '–∑–∞–≥—Ä' not in cleaned_text.lower():
        kyiv_time = datetime.utcnow() + timedelta(hours=3)
        time_str = kyiv_time.strftime('%H:%M')
        cleaned_text = f"{time_str}\n\n" + '\n\n'.join(cleaned_text.split('\n'))
    return cleaned_text

@dp.message()
async def handle_message(message: types.Message):
    global forwarding_enabled
    user_id = int(message.from_user.id)
    get_forwarding_status_from_url()
    if forwarding_enabled:
        if message.chat.id == -1002419856421:
            if message.text:
                cleaned_text = remove_emojis(message.text)
                if '@' not in cleaned_text and 't.me' not in cleaned_text and 'Auto_Forward_Messages_Bot' not in cleaned_text:
                    await bot.send_message(chat_id=-1002133315828, text=cleaned_text)
                else:
                    pass
    if str(user_id) not in ALLOWED_USERS:
        await message.reply(f"üö´ –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, {user_id}.")
        return
    if message.from_user.id in id_on:
        time_input = message.text.strip()
        validated_time = validate_time_format2(time_input)
        
        if validated_time and is_valid_time2(validated_time):
            location_id = user_selection2.get(message.from_user.id, "")
            flight_time_data = flight_times2.get(location_id, {})
            
            hours, minutes = map(int, validated_time.split(":"))
            message_text = f"‚ÑπÔ∏è <b> –ü—ñ–¥–ª—ñ—Ç –ë–ø–õ–ê –∑ {locations2[location_id]} </b> (–ø—É—Å–∫ –æ <b>{validated_time}</b>).\n\n"
            
            # –†–∞—Ö—É—î–º–æ —á–∞—Å –ø—ñ–¥–ª—å–æ—Ç—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
            for point, flight_time in flight_time_data.items():
                flight_hours = (minutes + flight_time) // 60
                flight_minutes = (minutes + flight_time) % 60
                target_time = f"{hours + flight_hours:02}:{flight_minutes:02}"
                message_text += f"{point} ‚Äî <b>{target_time}</b>;\n"
            
            await message.answer(message_text, parse_mode=ParseMode.HTML)
            id_on.remove(message.from_user.id)
            # –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–±—ñ—Ä
            user_selection2.pop(message.from_user.id, None)
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.")
            id_on.remove(message.from_user.id)
    if message.text and ('‚ÄºÔ∏è' in message.text or 'üõë' in message.text or '–•–∞—Ä–∫—ñ–≤' in message.text or '–ú–∞—Ä—ñ—É–ø–æ–ª—å' in message.text or "–°—É–º–∏" in message.text or '–ë–∞–ª—ñ—Å—Ç–∏–∫–∞' in message.text):
        #await bot.send_message(1911144024, '–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–µ')
        if re.match(r"(‚ÄºÔ∏è|üõë) \d{1,2}:\d{2} (–ø—É—Å–∫|–≤—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫|–∑–∞–ø—É—Å–∫)", message.text.lower()):
            text = message.text.lower()
            detected_locations = set()
            for key, value in locations.items():
                if key in text:
                    detected_locations.add(value)
            if detected_locations:
                if message.from_user.id == 6786356810:
                    formatted_locations = ", ".join(sorted(detected_locations))
                    response = f"–í—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫–∏ —à–∞—Ö–µ–¥—ñ–≤ –∑ —Ä–∞–π–æ–Ω—É {formatted_locations}."
                    await bot.send_message(-1002133315828, response)
                    return
                elif message.from_user.id == 1911144024:
                    formatted_locations = " —Ç–∞ ".join(sorted(detected_locations))
                    response = f"–í—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫–∏ —à–∞—Ö–µ–¥—ñ–≤ –∑ —Ä–∞–π–æ–Ω—É {formatted_locations}."
                    await bot.send_message(-1002339688858, response)
                    return
        if "–•–∞—Ä–∫—ñ–≤" in message.text or "–ú–∞—Ä—ñ—É–ø–æ–ª—å" in message.text or "–°—É–º–∏" in message.text:
            print('1')
            ARROW_URL = "https://i.ibb.co/bjPrgtgV/1-1.png"
            #ARROW_URL = "https://i.ibb.co/MDYsw1s9/1.png"
            CIRCLE_URL = "https://i.ibb.co/xqxGGJ0n/24.png"
            try:
                parts = message.text.split()
                if len(parts) < 3 or len(parts) > 4:
                    #raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: '–•–∞—Ä–∫—ñ–≤ 45 100 [90 –∞–±–æ —Å—Ö]'")
                    pass
                    #raise ValueError('')
        
                city, azimuth, distance = parts[:3]
                course = parts[3] if len(parts) == 4 else None
                azimuth, distance = map(float, [azimuth, distance])
        
                if city not in BASE_LOCATIONS:
                    raise ValueError("–ú—ñ—Å—Ç–æ –º–∞—î –±—É—Ç–∏ –∞–±–æ '–•–∞—Ä–∫—ñ–≤', –∞–±–æ '–ú–∞—Ä—ñ—É–ø–æ–ª—å'.")
        
                if course is not None:
                    if course.lower() in DIRECTION_MAP:
                        course = DIRECTION_MAP[course.lower()]
                    else:
                        course = float(course)
        
                lat0, lon0 = BASE_LOCATIONS[city]
                R = 6371
                d_rad = distance / R
                azimuth_rad = math.radians(azimuth)
        
                lat1 = math.asin(math.sin(math.radians(lat0)) * math.cos(d_rad) +
                                math.cos(math.radians(lat0)) * math.sin(d_rad) * math.cos(azimuth_rad))
                lon1 = math.radians(lon0) + math.atan2(math.sin(azimuth_rad) * math.sin(d_rad) * math.cos(math.radians(lat0)),
                                                        math.cos(d_rad) - math.sin(math.radians(lat0)) * math.sin(lat1))
                lat1, lon1 = math.degrees(lat1), math.degrees(lon1)
        
                selected_map = next((m for m in MAPS if m["lat_min"] <= lat1 <= m["lat_max"] and m["lon_min"] <= lon1 <= m["lon_max"]), None)
                if not selected_map:
                    await message.reply("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–∑–∞ –º–∞–ø–æ—é.")
                    return
        
                response = requests.get(selected_map["url"])
                img = Image.open(BytesIO(response.content))
                MAP_WIDTH, MAP_HEIGHT = img.size
                x = int((lon1 - selected_map["lon_min"]) / (selected_map["lon_max"] - selected_map["lon_min"]) * MAP_WIDTH)
                y = int((selected_map["lat_max"] - lat1) / (selected_map["lat_max"] - selected_map["lat_min"]) * MAP_HEIGHT)
        
                img_obj_url = ARROW_URL if course is not None else CIRCLE_URL
                response_obj = requests.get(img_obj_url)
                obj_img = Image.open(BytesIO(response_obj.content)).convert("RGBA")
                obj_size = int(MAP_WIDTH * (0.05 if course is not None else 0.03))
                obj_img = obj_img.resize((obj_size, obj_size), Image.LANCZOS)
                if course is not None:
                    obj_img = obj_img.rotate(360 - course, expand=True)
                img.paste(obj_img, (x - obj_size // 2, y - obj_size // 2), obj_img)
        
                description = f'<b>–ü—Ä–æ–ª—ñ—Ç</b> –∑–∞ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏</b>:<code> {lat1:.4f}, {lon1:.4f}</code>'
                if course is not None:
                    description += f'\n<b>–ö—É—Ä—Å</b>: <code>{get_course_description(course)}</code>'
        
                # Save the image into a BytesIO object
                output = BytesIO()
                img.save(output, format="PNG")
                output.seek(0)
                photo = BufferedInputFile(output.getvalue(), filename="image.png")
                await bot.send_photo(message.chat.id, photo, caption=description, parse_mode="HTML")
                
            except Exception as e:
                # Log error and ensure a valid message is returned
                if message.chat.type == 'private':
                    await bot.send_message(message.chat.id, f"Error: {str(e)}")
                else:
                    print(f'Error: {str(e)}')

def convert_to_decimal(degrees, minutes, seconds, direction):
    decimal = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal
def find_nearest_city(user_coordinates):
    nearest_city = None
    nearest_region = None
    nearest_distance = float('inf')
    
    for region, cities_list in cities.items():
        for city_name, city_coords in cities_list:
            distance = geodesic(user_coordinates, city_coords).kilometers
            if distance < nearest_distance:
                nearest_distance = distance
                nearest_city = city_name
                nearest_region = region
    
    return nearest_city, nearest_region, nearest_distance
def parse_coordinates(coord_str):
    lat_str, lon_str = coord_str.split(", ")
    
    # –†–æ–∑–±—ñ—Ä —à–∏—Ä–æ—Ç–∏
    lat_deg, lat_min, lat_sec, lat_dir = lat_str.replace('¬∞', '').replace("'", '').replace('"', '').split()
    
    # –†–æ–∑–±—ñ—Ä –¥–æ–≤–≥–æ—Ç–∏
    lon_deg, lon_min, lon_sec, lon_dir = lon_str.replace('¬∞', '').replace("'", '').replace('"', '').split()
    
    return (lat_deg, lat_min, lat_sec, lat_dir), (lon_deg, lon_min, lon_sec, lon_dir)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ –¥–µ—Å—è—Ç–∫–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
def convert_to_decimal(degrees, minutes, seconds, direction):
    decimal = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É
def get_course_description(course):
    course = course % 360  # –ö–æ—Ä–∏–≥—É—î–º–æ –∫—É—Ä—Å –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [0, 360)
    
    if 345 <= course <= 360 or 0 <= course < 15:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–∏–π"
    elif 15 <= course < 75:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π"
    elif 75 <= course < 105:
        return "—Å—Ö—ñ–¥–Ω–∏–π"
    elif 105 <= course < 165:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π"
    elif 165 <= course < 195:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–∏–π"
    elif 195 <= course < 255:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π"
    elif 255 <= course < 285:
        return "–∑–∞—Ö—ñ–¥–Ω–∏–π"
    elif 285 <= course < 345:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π"
    else:
        return "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π"
    
def mark_on_map(lat1, lon1, course=None):
    # –ú–∞–ø–∏ –¥–ª—è –≤–∏–±–æ—Ä—É
    MAPS = [
        {
            "url": "https://i.ibb.co/b5j2XrRD/2025-03-01-14-17-37.png",
            "lat_min": 49.972, "lat_max": 53.527,
            "lon_min": 29.399, "lon_max": 43.923
        },
        {
            "url": "https://i.ibb.co/S7D5MZfp/2025-03-01-12-26-19.png",
            "lat_min": 27.49, "lat_max": 56.65,
            "lon_min": 39.84, "lon_max": 48.08
        },
        {
            "url": "https://i.ibb.co/cGBhScb/image-2025-02-20-22-18-21.png",
            "lat_min": 51.43, "lat_max": 58.25,
            "lon_min": 26.89, "lon_max": 56.23
        },
        {
            "url": "https://i.ibb.co/JFKnYNfh/2025-02-20-20-56-32.png",
            "lat_min": 44.20, "lat_max": 51.82,
            "lon_min": 29.07, "lon_max": 57.44
        },
        {
            "url": "https://i.ibb.co/XZnRB6dq/2025-02-20-21-12-10.png",
            "lat_min": 60.93, "lat_max": 70.24,
            "lon_min": 17.01, "lon_max": 78.22
        },
        {
            "url": "https://i.ibb.co/TMc341G2/2025-02-20-21-10-31.png",
            "lat_min": 50.18, "lat_max": 62.65,
            "lon_min": 26.32, "lon_max": 87.63
        },
        {
            "url": "https://i.ibb.co/nsSyv88P/2025-02-21-16-23-47.png",
            "lat_min": 54.14, "lat_max": 65.51,
            "lon_min": 38.98, "lon_max": 96.28
        }
    ]

    selected_map = next((m for m in MAPS if m["lat_min"] <= lat1 <= m["lat_max"] and m["lon_min"] <= lon1 <= m["lon_max"]), None)
    if not selected_map:
        return None
    response = requests.get(selected_map["url"])
    img = Image.open(BytesIO(response.content))
    MAP_WIDTH, MAP_HEIGHT = img.size

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç x, y –Ω–∞ –∫–∞—Ä—Ç—ñ
    x = int((lon1 - selected_map["lon_min"]) / (selected_map["lon_max"] - selected_map["lon_min"]) * MAP_WIDTH)
    y = int((selected_map["lat_max"] - lat1) / (selected_map["lat_max"] - selected_map["lat_min"]) * MAP_HEIGHT)

    # –í–∏–±—ñ—Ä –º–∞—Ä–∫–µ—Ä–∞ (—Å—Ç—Ä—ñ–ª–∫–∞ –∞–±–æ –∫–æ–ª–æ) —Ç–∞ –π–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    ARROW_URL = "https://i.ibb.co/bjPrgtgV/1-1.png"
    #ARROW_URL = "https://i.ibb.co/MDYsw1s9/1.png"
    CIRCLE_URL = "https://i.ibb.co/xqxGGJ0n/24.png"
    img_obj_url = ARROW_URL if course is not None else CIRCLE_URL
    response_obj = requests.get(img_obj_url)
    obj_img = Image.open(BytesIO(response_obj.content)).convert("RGBA")
    obj_size = int(MAP_WIDTH * (0.05 if course is not None else 0.03))
    obj_img = obj_img.resize((obj_size, obj_size), Image.LANCZOS)
    if course is not None:
        obj_img = obj_img.rotate(360 - course, expand=True)
    img.paste(obj_img, (x - obj_size // 2, y - obj_size // 2), obj_img)
    return img
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

'''
            if re.match(r"^–ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n(\d{1,2}¬∞ \d{1,2}' \d{1,2}\" [NS]), (\d{1,3}¬∞ \d{1,2}' \d{1,2}\" [EW])\n–ö—É—Ä—Å (\d+)$", message.text):
                try:
                    await bot.send_message(1911144024, '–µ—Ç–∞–ø0')
                    parts = message.text.splitlines()
                    await bot.send_message(1911144024, '–µ—Ç–∞–ø0.5')
                    if len(parts) != 3:
                        await message.reply('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞:\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E" E\n–ö—É—Ä—Å 210\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)
                        raise ValueError('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ 1')
                    if parts[0] != "–ë–∞–ª—ñ—Å—Ç–∏–∫–∞":
                        await message.reply('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞:\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E" E\n–ö—É—Ä—Å 210\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)
                        raise ValueError('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ 2')
                    await bot.send_message(1911144024, '–µ—Ç–∞–ø1')
                    coord_str = parts[1]
                    (lat_deg, lat_min, lat_sec, lat_dir), (lon_deg, lon_min, lon_sec, lon_dir) = parse_coordinates(coord_str)
                    lat1 = convert_to_decimal(lat_deg, lat_min, lat_sec, lat_dir)
                    lon1 = convert_to_decimal(lon_deg, lon_min, lon_sec, lon_dir)
                    nearest_city, nearest_region = find_nearest_city((lat1, lon1))
                    course = float(parts[2].split()[1])
                    course_description = get_course_description(course)
                    img = mark_on_map(lat1, lon1, course)
                    if img is None:
                        await message.reply("üö´ –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
                    else:
                        await bot.send_message(1911144024, '–µ2')
                        img.save("output_map.png")
                        with open("output_map.png", "rb") as f:
                            await bot.send_photo(
                                message.chat.id, 
                                f, 
                                caption=f"<b>–ù–∞–π–±–ª–∏–∂—á–µ –º—ñ—Å—Ç–æ</b>: <code>{nearest_city}</code>, <code>{nearest_region}</code>.\n"
                                        f"<b>–ö—É—Ä—Å</b>: <code>{course_description}</code>",
                                parse_mode=ParseMode.HTML
                            )
                except ValueError as e:
                    await bot.send_message(1911144024, f"Error: {str(e)}")
'''
