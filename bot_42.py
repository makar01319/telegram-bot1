#import telebot
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode

import math
from geopy.distance import geodesic
from PIL import Image
import requests
from io import BytesIO
import re
import os

bot = Bot(token=os.environ["TOKEN"])
dp = Dispatcher()
#ALLOWED_USERS = [6786356810, 7151289924, 1363237952, 1003452396, 1911144024, 5150929048, 1578662299, 7534631220, 705241092, 2127881707, 1661767451]
BASE_LOCATIONS = {"–•–∞—Ä–∫—ñ–≤": (50.00, 36.25), "–ú–∞—Ä—ñ—É–ø–æ–ª—å": (47.10, 37.55)}

MAPS = [
        {
            "url": "https://i.ibb.co/b5j2XrRD/2025-03-01-14-17-37.png",
            "lat_min": 49.972, "lat_max": 53.527,
            "lon_min": 29.399, "lon_max": 43.923
        },
        {
            "url": "https://i.ibb.co/S7D5MZfp/2025-03-01-12-26-19.png",
            "lat_min": 39.84, "lat_max": 48.08,
            "lon_min": 27.49, "lon_max": 56.65
        },
        {
            "url": "https://i.ibb.co/cGBhScb/image-2025-02-20-22-18-21.png",
            "lat_min": 51.43, "lat_max": 58.25,
            "lon_min": 26.89, "lon_max": 56.23
        },
        {
            "url": "https://i.ibb.co/JFKnYNfh/2025-02-20-20-56-32.png",
            "lat_min": 44.20, "lat_max": 51.82,
            "lon_min": 29.07, "lon_max": 57.44
        },
        {
            "url": "https://i.ibb.co/XZnRB6dq/2025-02-20-21-12-10.png",
            "lat_min": 60.93, "lat_max": 70.24,
            "lon_min": 17.01, "lon_max": 78.22
        },
        {
            "url": "https://i.ibb.co/TMc341G2/2025-02-20-21-10-31.png",
            "lat_min": 50.18, "lat_max": 62.65,
            "lon_min": 26.32, "lon_max": 87.63
        },
        {
            "url": "https://i.ibb.co/nsSyv88P/2025-02-21-16-23-47.png",
            "lat_min": 54.14, "lat_max": 65.51,
            "lon_min": 38.98, "lon_max": 96.28
        }
    ]

DIRECTION_MAP = {
    "–ø–Ω": 0,
    "–ø–Ω-—Å—Ö": 45,
    "—Å—Ö": 90,
    "–ø–¥-—Å—Ö": 135,
    "–ø–¥": 180,
    "–ø–¥-–∑—Ö": 225,
    "–∑—Ö": 270,
    "–ø–Ω-–∑—Ö": 315
}
# –ú—ñ—Å—Ç–∞ —Ç–∞ —ó—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
cities = {
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–•–µ—Ä—Å–æ–Ω", (46.6356, 32.6169)),
        ("–ù–æ–≤–æ–æ–ª–µ–∫—Å—ñ—ó–≤–∫–∞", (46.0929, 32.5503)),
        ("–ö–∞—Ö–æ–≤–∫–∞", (46.7269, 33.4676)),
        ("–ì–µ–Ω—ñ—á–µ—Å—å–∫", (46.4216, 34.7801)),
        ("–°–∫–∞–¥–æ–≤—Å—å–∫", (46.3928, 33.5739)),
        ("–û–ª–µ—à–∫–∏", (46.1448, 32.8914)),
        ("–ë–µ—Ä–∏—Å–ª–∞–≤", (46.6425, 33.3953)),
    ],
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ó–∞–ø–æ—Ä—ñ–∂–∂—è", (47.8388, 35.1396)),
        ("–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å", (46.0661, 35.3656)),
        ("–ë–µ—Ä–¥—è–Ω—Å—å–∫", (46.7661, 36.8119)),
        ("–ï–Ω–µ—Ä–≥–æ–¥–∞—Ä", (47.5096, 34.5858)),
        ("–¢–æ–∫–º–∞–∫", (47.5313, 35.6778)),
        ("–í–∞—Å–∏–ª—ñ–≤–∫–∞", (47.4817, 35.2250)),
        ("–û—Ä—ñ—Ö—ñ–≤", (47.4194, 35.6636)),
    ],
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–î–æ–Ω–µ—Ü—å–∫", (48.0159, 37.8029)),
        ("–ú–∞—Ä—ñ—É–ø–æ–ª—å", (47.0974, 37.5407)),
        ("–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫", (48.7197, 37.5613)),
        ("–ü–æ–∫—Ä–æ–≤—Å—å–∫", (48.2597, 37.2206)),
        ("–ë–∞—Ö–º—É—Ç", (48.5747, 38.0295)),
        ("–°–ª–æ–≤'—è–Ω—Å—å–∫", (48.8722, 37.6210)),
        ("–î—Ä—É–∂–∫—ñ–≤–∫–∞", (48.2925, 37.6162)),
    ],
    "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–õ—É–≥–∞–Ω—Å—å–∫", (48.5747, 39.3147)),
        ("–°—î–≤—î—Ä–æ–¥–æ–Ω–µ—Ü—å–∫", (48.9253, 38.5011)),
        ("–õ–∏—Å–∏—á–∞–Ω—Å—å–∫", (48.9221, 38.4525)),
        ("–ê–ª—á–µ–≤—Å—å–∫", (48.5784, 38.7417)),
        ("–°—Ç–∞—Ö–∞–Ω–æ–≤", (48.6863, 38.5364)),
        ("–ö—Ä–µ–º—ñ–Ω–Ω–∞", (48.7462, 38.3832)),
        ("–ü–æ–ø–∞—Å–Ω–∞", (48.6262, 38.4779)),
    ],
    "–†–æ—Å—Ç–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", (47.2357, 39.7015)),
        ("–¢–∞–≥–∞–Ω—Ä–æ–≥", (47.2307, 38.9020)),
        ("–®–∞—Ö—Ç–∏", (48.0395, 40.2232)),
        ("–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—å–∫", (47.4095, 40.0997)),
        ("–ê–∑–æ–≤", (47.1100, 38.8806)),
        ("–ë–∞—Ç–∞–π—Å—å–∫", (47.2295, 39.7301)),
        ("–í–æ–ª–≥–æ–¥–æ–Ω—Å—å–∫", (48.0403, 42.1431)),
    ],
    "–í–æ—Ä–æ–Ω–µ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–í–æ—Ä–æ–Ω–µ–∂", (51.6758, 39.2082)),
        ("–†–æ—Å—Å–æ—à", (50.8257, 39.4897)),
        ("–õ–∏—Å–∫–∏–Ω", (50.3403, 39.5063)),
        ("–ë–æ—Ä–∏—Å–æ–≥–ª—ñ–±—Å—å–∫", (51.2947, 39.6106)),
        ("–ü–∞–≤–ª–æ–≤—Å—å–∫", (50.6290, 39.5082)),
        ("–ë–æ–≥—É—á–∞—Ä", (50.6539, 39.2416)),
        ("–û—Å—Ç—Ä–æ–≥–æ–∂—Å—å–∫", (50.8761, 39.3130)),
    ],
    "–ë—î–ª–≥–æ—Ä–æ–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ë—î–ª–≥–æ—Ä–æ–¥", (50.5937, 36.5858)),
        ("–°—Ç–∞—Ä–∏–π –û—Å–∫–æ–ª", (51.2916, 37.8549)),
        ("–ì—Ä–∞–π–≤–æ—Ä–æ–Ω", (50.5446, 36.5654)),
        ("–®–µ–±–µ–∫—ñ–Ω–æ", (50.6144, 36.7190)),
        ("–ö–æ—Ä–æ—á–∞", (50.4981, 36.4954)),
        ("–í–∞–ª—É–π–∫–∏", (50.4116, 37.4558)),
        ("–ß–µ—Ä–Ω—è–Ω–∫–∞", (50.3756, 37.2297)),
    ],
    "–ö—É—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ö—É—Ä—Å—å–∫", (51.7373, 36.1876)),
        ("–†–∏–ª—å—Å—å–∫", (51.0295, 35.7665)),
        ("–©–∏–≥—Ä–∏", (51.0405, 36.1763)),
        ("–õ—å–≥–æ–≤", (51.3771, 35.6593)),
        ("–°—É–¥–∂–∞", (51.1281, 34.9554)),
        ("–û–±–æ—è–Ω—å", (50.7255, 36.1358)),
        ("–§–∞—Ç–µ–∂", (51.2766, 36.4244)),
    ],
    "–ë—Ä—è–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": [
        ("–ë—Ä—è–Ω—Å—å–∫", (53.2415, 34.3705)),
        ("–ö–ª–∏–Ω—Ü—ñ", (52.6646, 32.0295)),
        ("–°–µ–≤—Å—å–∫", (52.0995, 33.4299)),
        ("–ù–æ–≤–æ–∑–∏–±–∫–æ–≤", (52.9496, 31.1169)),
        ("–ü–æ—á–µ–ø", (53.2490, 33.3876)),
        ("–§–æ–∫–∏–Ω–æ", (53.0569, 34.3486)),
        ("–ñ—É–∫–æ–≤–∫–∞", (53.0255, 33.1424)),
    ]
}

BASE_LOCATIONS = {
    "–•–∞—Ä–∫—ñ–≤": (50.00, 36.25),
    "–ú–∞—Ä—ñ—É–ø–æ–ª—å": (47.10, 37.55)
}

# –í–∞—à—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
ALLOWED_USERS = ['6786356810', '7151289924', '1363237952', '1003452396', '1911144024', '5150929048', '1578662299', '7534631220', '705241092', '2127881707', '1661767451']

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if str(message.from_user.id) not in ALLOWED_USERS:
        await message.answer("üö´ –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    welcome_text = (
        "<b>–ë–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ</b> –≤–∏—Ä–∞—Ö—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏/–∞–∑–∏–º—É—Ç–æ–º —Ç–∞ –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—è–º.\n"
        "<b>–í–≤—ñ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ:</b>\n\n"
        "1Ô∏è‚É£ \n1 ‚Äî –º—ñ—Å—Ç–æ (–•–∞—Ä–∫—ñ–≤/–ú–∞—Ä—ñ—É–ø–æ–ª—å)\n"
        "2 ‚Äî –∞–∑–∏–º—É—Ç\n"
        "3 ‚Äî –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—è\n"
        "4 ‚Äî –∫—É—Ä—Å (–Ω–µ–æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π)\n\n"
        "2Ô∏è‚É£\n1 ‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n"
        "2 ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (–≤–∏–¥—É 51¬∞ 46' 5\" N, 36¬∞ 19' 42\" E)\n"
        "3 ‚Äî –∫—É—Ä—Å (–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥—É '–ö—É—Ä—Å 0')\n\n"
        "<b>–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–≤–µ–¥–µ–Ω–Ω—è:</b>\n"
        "‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46' 5\" N, 36¬∞ 19' 42\" E\n–ö—É—Ä—Å 100\n"
        "‚Äî –•–∞—Ä–∫—ñ–≤ 10 555 85\n"
        "‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 85 1000 195"
    )

    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

locations = {
    "–∫—É—Ä—Å": "–ö—É—Ä—Å—å–∫",
    "—á–∞—É–¥": "–º–∏—Å –ß–∞—É–¥–∞",
    "–∞—Ö—Ç": "–ü—Ä–∏–º–æ—Ä—Å—å–∫-–ê—Ö—Ç–∞—Ä—Å—å–∫",
    "–æ—Ä–ª–∞": "–û—Ä–µ–ª",
    "–æ—Ä–µ–ª": "–û—Ä–µ–ª",
    "–æ—Ä–ª–æ–≤": "–û—Ä–µ–ª",
    "–±—Ä—è–Ω—Å": "–ë—Ä—è–Ω—Å—å–∫–∞",
    "–Ω–∞–≤–ª": "–ë—Ä—è–Ω—Å—å–∫–∞",
    "—î–π—Å—å": "–Ñ–π—Å—å–∫",
    "—à–∞—Ç": "–°–º–æ–ª–µ–Ω—Å—å–∫",
    "–º—ñ–ª–ª": "–ú—ñ–ª–ª–µ—Ä–æ–≤–æ (–†–æ—Å—Ç–æ–≤—Å—å–∫–∞ –æ–±–ª.)"
}

@dp.message()
async def handle_message(message: types.Message):
    user_id = int(message.from_user.id)
    if str(user_id) not in ALLOWED_USERS:
        await message.reply(f"üö´ –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, {user_id}.")
        return
            
    if message.text:
        if re.match(r"‚ÄºÔ∏è \d{1,2}:\d{2} (–ø—É—Å–∫|–≤—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫|–∑–∞–ø—É—Å–∫)", message.text.lower()):
            text = message.text.lower()
            detected_locations = set()
            for key, value in locations.items():
                if key in text:
                    detected_locations.add(value)
            if detected_locations:
                if message.from_user.id == 6786356810:
                    formatted_locations = ", ".join(sorted(detected_locations))
                    response = f"–í—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫–∏ —à–∞—Ö–µ–¥—ñ–≤ –∑ —Ä–∞–π–æ–Ω—É {formatted_locations}."
                    await bot.send_message(-1002133315828, response)
                elif message.from_user.id == 1911144024:
                    formatted_locations = " —Ç–∞ ".join(sorted(detected_locations))
                    response = f"–í—ñ–¥–º—ñ—á–µ–Ω–æ –ø—É—Å–∫–∏ —à–∞—Ö–µ–¥—ñ–≤ –∑ —Ä–∞–π–æ–Ω—É {formatted_locations}."
                    await bot.send_message(-1002339688858, response)
            elif "–ë–∞–ª—ñ—Å—Ç–∏–∫–∞" in message.text:
                try:
                    parts = message.text.splitlines()
                    if len(parts) != 3:
                        await message.reply('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞:\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E" E\n–ö—É—Ä—Å 210\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)
                        raise ValueError('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ 1')
                    if parts[0] != "–ë–∞–ª—ñ—Å—Ç–∏–∫–∞":
                        await message.reply('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞:\n–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E" E\n–ö—É—Ä—Å 210\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)
                        raise ValueError('‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ 2')
                    coord_str = parts[1]
                    (lat_deg, lat_min, lat_sec, lat_dir), (lon_deg, lon_min, lon_sec, lon_dir) = parse_coordinates(coord_str)
                    lat1 = convert_to_decimal(lat_deg, lat_min, lat_sec, lat_dir)
                    lon1 = convert_to_decimal(lon_deg, lon_min, lon_sec, lon_dir)
                    nearest_city, nearest_region, nearest_distance = find_nearest_city((lat1, lon1))
                    course = float(parts[2].split()[1])
                    course_description = get_course_description(course)
                    img = mark_on_map(lat1, lon1, course)
                    if img is None:
                        await message.reply("üö´ –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
                    else:
                        img.save("output_map.png")
                        with open("output_map.png", "rb") as f:
                            await bot.send_photo(
                                message.chat.id, 
                                f, 
                                caption=f"<b>–ù–∞–π–±–ª–∏–∂—á–µ –º—ñ—Å—Ç–æ</b>: <code>{nearest_city}</code>, <code>{nearest_region}</code>.\n"
                                        f"<b>–ö—É—Ä—Å</b>: <code>{course_description}</code>",
                                parse_mode=ParseMode.HTML
                            )
                except ValueError:
                    pass
            elif "–•–∞—Ä–∫—ñ–≤" in message.text or "–ú–∞—Ä—ñ—É–ø–æ–ª—å" in message.text:
                ARROW_URL = "https://i.ibb.co/bjPrgtgV/1-1.png"
                CIRCLE_URL = "https://i.ibb.co/xqxGGJ0n/24.png"
                try:
                    parts = message.text.split()
                    if len(parts) < 3 or len(parts) > 4:
                        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: '–•–∞—Ä–∫—ñ–≤ 45 100 [90 –∞–±–æ —Å—Ö]'")
        
                    city, azimuth, distance = parts[:3]
                    course = parts[3] if len(parts) == 4 else None
                    azimuth, distance = map(float, [azimuth, distance])
        
                    if city not in BASE_LOCATIONS:
                        raise ValueError("–ú—ñ—Å—Ç–æ –º–∞—î –±—É—Ç–∏ –∞–±–æ '–•–∞—Ä–∫—ñ–≤', –∞–±–æ '–ú–∞—Ä—ñ—É–ø–æ–ª—å'.")
        
                    if course is not None:
                        if course.lower() in DIRECTION_MAP:
                            course = DIRECTION_MAP[course.lower()]
                        else:
                            course = float(course)
        
                    lat0, lon0 = BASE_LOCATIONS[city]
                    R = 6371
                    d_rad = distance / R
                    azimuth_rad = math.radians(azimuth)
        
                    lat1 = math.asin(math.sin(math.radians(lat0)) * math.cos(d_rad) +
                                    math.cos(math.radians(lat0)) * math.sin(d_rad) * math.cos(azimuth_rad))
                    lon1 = math.radians(lon0) + math.atan2(math.sin(azimuth_rad) * math.sin(d_rad) * math.cos(math.radians(lat0)),
                                                        math.cos(d_rad) - math.sin(math.radians(lat0)) * math.sin(lat1))
                    lat1, lon1 = math.degrees(lat1), math.degrees(lon1)
        
                    selected_map = next((m for m in MAPS if m["lat_min"] <= lat1 <= m["lat_max"] and m["lon_min"] <= lon1 <= m["lon_max"]), None)
                    if not selected_map:
                        await message.reply("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–∑–∞ –º–∞–ø–æ—é.")
                        return
        
                    response = requests.get(selected_map["url"])
                    img = Image.open(BytesIO(response.content))
                    MAP_WIDTH, MAP_HEIGHT = img.size
                    x = int((lon1 - selected_map["lon_min"]) / (selected_map["lon_max"] - selected_map["lon_min"]) * MAP_WIDTH)
                    y = int((selected_map["lat_max"] - lat1) / (selected_map["lat_max"] - selected_map["lat_min"]) * MAP_HEIGHT)
        
                    img_obj_url = ARROW_URL if course is not None else CIRCLE_URL
                    response_obj = requests.get(img_obj_url)
                    obj_img = Image.open(BytesIO(response_obj.content)).convert("RGBA")
                    obj_size = int(MAP_WIDTH * (0.05 if course is not None else 0.03))
                    obj_img = obj_img.resize((obj_size, obj_size), Image.LANCZOS)
                    if course is not None:
                        obj_img = obj_img.rotate(360 - course, expand=True)
                    img.paste(obj_img, (x - obj_size // 2, y - obj_size // 2), obj_img)
        
                    description = f'<b>–ü—Ä–æ–ª—ñ—Ç</b> –∑–∞ <b>–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏</b>:<code> {lat1:.4f}, {lon1:.4f}</code>'
                    if course is not None:
                        description += f'\n<b>–ö—É—Ä—Å</b>: <code>{get_course_description(course)}</code>'
        
                    output = BytesIO()
                    img.save(output, format="PNG")
                    output.seek(0)
                    await bot.send_photo(message.chat.id, output, caption=description, parse_mode=ParseMode.HTML)
                except ValueError as e:
                    await message.reply('‚ÑπÔ∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E\n–ö—É—Ä—Å 100\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)
            else:
                if message.chat.type == 'private':
                    await message.reply('‚ÑπÔ∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, <b>—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∏–≥–ª—è–¥:</b>\n\n‚Äî –ë–∞–ª—ñ—Å—Ç–∏–∫–∞\n51¬∞ 46\' 5" N, 36¬∞ 19\' 42" E\n–ö—É—Ä—Å 100\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100 100\n\n<b>–ê–±–æ</b> –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n‚Äî –•–∞—Ä–∫—ñ–≤ 100 100\n‚Äî –ú–∞—Ä—ñ—É–ø–æ–ª—å 0 100', parse_mode=ParseMode.HTML)

def convert_to_decimal(degrees, minutes, seconds, direction):
    decimal = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal
def find_nearest_city(user_coordinates):
    nearest_city = None
    nearest_region = None
    nearest_distance = float('inf')
    
    for region, cities_list in cities.items():
        for city_name, city_coords in cities_list:
            distance = geodesic(user_coordinates, city_coords).kilometers
            if distance < nearest_distance:
                nearest_distance = distance
                nearest_city = city_name
                nearest_region = region
    
    return nearest_city, nearest_region, nearest_distance
def parse_coordinates(coord_str):
    lat_str, lon_str = coord_str.split(", ")
    
    # –†–æ–∑–±—ñ—Ä —à–∏—Ä–æ—Ç–∏
    lat_deg, lat_min, lat_sec, lat_dir = lat_str.replace('¬∞', '').replace("'", '').replace('"', '').split()
    
    # –†–æ–∑–±—ñ—Ä –¥–æ–≤–≥–æ—Ç–∏
    lon_deg, lon_min, lon_sec, lon_dir = lon_str.replace('¬∞', '').replace("'", '').replace('"', '').split()
    
    return (lat_deg, lat_min, lat_sec, lat_dir), (lon_deg, lon_min, lon_sec, lon_dir)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ –¥–µ—Å—è—Ç–∫–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
def convert_to_decimal(degrees, minutes, seconds, direction):
    decimal = float(degrees) + float(minutes) / 60 + float(seconds) / 3600
    if direction in ['S', 'W']:
        decimal = -decimal
    return decimal
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä—Å—É
def get_course_description(course):
    course = course % 360  # –ö–æ—Ä–∏–≥—É—î–º–æ –∫—É—Ä—Å –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [0, 360)
    
    if 345 <= course <= 360 or 0 <= course < 15:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–∏–π"
    elif 15 <= course < 75:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π"
    elif 75 <= course < 105:
        return "—Å—Ö—ñ–¥–Ω–∏–π"
    elif 105 <= course < 165:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π"
    elif 165 <= course < 195:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–∏–π"
    elif 195 <= course < 255:
        return "–ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π"
    elif 255 <= course < 285:
        return "–∑–∞—Ö—ñ–¥–Ω–∏–π"
    elif 285 <= course < 345:
        return "–ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π"
    else:
        return "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π"
    
def mark_on_map(lat1, lon1, course=None):
    # –ú–∞–ø–∏ –¥–ª—è –≤–∏–±–æ—Ä—É
    MAPS = [
        {
            "url": "https://i.ibb.co/b5j2XrRD/2025-03-01-14-17-37.png",
            "lat_min": 49.972, "lat_max": 53.527,
            "lon_min": 29.399, "lon_max": 43.923
        },
        {
            "url": "https://i.ibb.co/S7D5MZfp/2025-03-01-12-26-19.png",
            "lat_min": 27.49, "lat_max": 56.65,
            "lon_min": 39.84, "lon_max": 48.08
        },
        {
            "url": "https://i.ibb.co/cGBhScb/image-2025-02-20-22-18-21.png",
            "lat_min": 51.43, "lat_max": 58.25,
            "lon_min": 26.89, "lon_max": 56.23
        },
        {
            "url": "https://i.ibb.co/JFKnYNfh/2025-02-20-20-56-32.png",
            "lat_min": 44.20, "lat_max": 51.82,
            "lon_min": 29.07, "lon_max": 57.44
        },
        {
            "url": "https://i.ibb.co/XZnRB6dq/2025-02-20-21-12-10.png",
            "lat_min": 60.93, "lat_max": 70.24,
            "lon_min": 17.01, "lon_max": 78.22
        },
        {
            "url": "https://i.ibb.co/TMc341G2/2025-02-20-21-10-31.png",
            "lat_min": 50.18, "lat_max": 62.65,
            "lon_min": 26.32, "lon_max": 87.63
        },
        {
            "url": "https://i.ibb.co/nsSyv88P/2025-02-21-16-23-47.png",
            "lat_min": 54.14, "lat_max": 65.51,
            "lon_min": 38.98, "lon_max": 96.28
        }
    ]

    selected_map = next((m for m in MAPS if m["lat_min"] <= lat1 <= m["lat_max"] and m["lon_min"] <= lon1 <= m["lon_max"]), None)
    if not selected_map:
        return None
    response = requests.get(selected_map["url"])
    img = Image.open(BytesIO(response.content))
    MAP_WIDTH, MAP_HEIGHT = img.size

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç x, y –Ω–∞ –∫–∞—Ä—Ç—ñ
    x = int((lon1 - selected_map["lon_min"]) / (selected_map["lon_max"] - selected_map["lon_min"]) * MAP_WIDTH)
    y = int((selected_map["lat_max"] - lat1) / (selected_map["lat_max"] - selected_map["lat_min"]) * MAP_HEIGHT)

    # –í–∏–±—ñ—Ä –º–∞—Ä–∫–µ—Ä–∞ (—Å—Ç—Ä—ñ–ª–∫–∞ –∞–±–æ –∫–æ–ª–æ) —Ç–∞ –π–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    ARROW_URL = "https://i.ibb.co/bjPrgtgV/1-1.png"
    CIRCLE_URL = "https://i.ibb.co/xqxGGJ0n/24.png"
    img_obj_url = ARROW_URL if course is not None else CIRCLE_URL
    response_obj = requests.get(img_obj_url)
    obj_img = Image.open(BytesIO(response_obj.content)).convert("RGBA")
    obj_size = int(MAP_WIDTH * (0.05 if course is not None else 0.03))
    obj_img = obj_img.resize((obj_size, obj_size), Image.LANCZOS)
    if course is not None:
        obj_img = obj_img.rotate(360 - course, expand=True)
    img.paste(obj_img, (x - obj_size // 2, y - obj_size // 2), obj_img)
    return img

async def main():
    await dp.start_polling(bot, allowed_updates=["message"])

if __name__ == "__main__":
    asyncio.run(main())
